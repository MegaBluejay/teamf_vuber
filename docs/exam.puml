@startuml

package Models {
        class CheckPoint{
                Point Coordinate
                bool IsPassed
                Pass()
        }

        abstract class User {
                string Username
        }
        abstract class Entity {
                Guid Id
        }
        class Client {
                PaymentCard PaymentCard
        }
        class Driver {
                RideType MaxRideLevel
                RideType MinRideLevel
                Point LastKnownLocation
                UpdateLocation(Point newLocation, DateTime updateTime)
                bool CheckRideLevels(RideType minRideLevel, RideType maxRideLevel)
        }
        class PaymentCard {
            string CardData
            decimal Money
        }
        
        enum PaymentType{
                Cash
                PaymentCard
        }
        enum RideStatus {
                Looking
                Waiting
                InProgress
                Complete
                Cancelled
        }
        enum RideType {
                Economy,
                Business,
                Ultra,
        }
        class Ride {
                Client Client
                Driver Driver
                Location StartLocation
                List<Location> TargetLocations
                decimal Cost
                RideStatus RideStatus
                RideType RideType
                int ClientScore
                int DriverScore
        }
        interface IChronometer{
                DateTime TimeNow()
        }
        class Rating {
                Mark Value
                uint RidesNumber
        }                
        
        class Mark {
                double Value
        }
        
        Client --|> User
        Driver --|> User
        
        RealTimeChronometer --|> IChronometer
        
        Client --|> Entity
        Driver --|> Entity
        PaymentCard --|> Entity
        Ride --|> Entity
        User --|> Entity


        Ride o-- Client
        Ride o-- Driver
        Ride *-- RideStatus
        Ride *-- RideType
        Ride *-- PaymentType
        Rating *-- Mark
        Client *-- PaymentCard
}

class Repos
Repos --> Client
Repos --> Driver
Repos --> Ride


package Server {
        interface IVuberController
        interface IHubContext
        class VuberController
        VuberController --|> IVuberController
        VuberController --> Repos
        VuberController --> IHubContext

        abstract class VuberHub{
                GetCurrentUsername()
                SetRating(Mark mark, Guid rideId)
        }
        class ClientHub{
                OrderRide(RideOrder rideOrder)
                AddPaymentCard(string CardData)
                IEnumerable<RideToClient> SeeRides()
                CancelOrder()
                Rating GetDriverRating(Guid driverGuid)
        }
        class DriverHub{
                AcceptOrder()
                RejectOrder()
                NotifyClientAboutArrival()
                SendCurrentLocation(Point currentLocation)
        }
        
        class IClientClient{
                Task UpdateRide(RideToClient rideToClient)
                Task UpdateDriverLocation(Point coordinate)
        }
        
        class IDriverClient{
                Task RideRequested(RideToDriver ride)
                Task RideCancelled()
                Task TakeCashPayment()
        }
        
        class IVuberController{
                Ride CreateNewRide(string clientUsername, LineString path, PaymentType paymentType, RideType rideType)
                bool DriverTakesRide(string driverUsername, Guid rideId)
                void RegisterClient(NewClient newClient)
                void RegisterDriver(NewDriver newDriver)
                void DriverArrives(Guid rideId)
                void PassCheckpoint(Guid rideId, int checkpointNumber)
                void RideCompleted(Guid rideId)
                void CancelRide(Guid rideId)
                IReadOnlyList<Ride> SeeRides(string userUsername)
                void SetRating(Mark rating, Guid rideId, Func<Ride, User> userGetter)
                void AddPaymentCard(string clientUsername, string cardData)
                void UpdateDriverLocation(string driverUsername, Point location)
        }
                
        ClientHub --|> VuberHub
        DriverHub --|> VuberHub
        ClientHub --> IVuberController
        DriverHub --> IVuberController

        class UserIdProvider
        UserIdProvider --> VuberController
        VuberHub --> UserIdProvider

        interface IVuberClient
        interface IClientClient
        interface IDriverClient
        IClientClient --|> IVuberClient
        IDriverClient --|> IVuberClient
        ClientHub --> IClientClient
        DriverHub --> IDriverClient
}

@enduml
